---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW
This project aims to build an invoice processing system.  The system will incorporate AI for automated data extraction and validation.  The project will utilize an existing codebase where possible.

## CODE STYLE
Consistent indentation (4 spaces).  Follow PEP 8 guidelines where applicable.

## FOLDER ORGANIZATION
To be defined based on project growth.  A proposal should be made and confirmed before implementation.

## TECH STACK
Python (Specify version),  PostgreSQL (Specify version),  React (Specify version),  GPT-4, Claude 3.5 Sonnet, OpenAI GPT-4, Vercel AI SDK, `react-pdf`.  Claude 3.5 Sonnet is the primary model for invoice processing. Anthropic provider added for Claude integration. `react-pdf` added for PDF preview functionality.

## PROJECT-SPECIFIC STANDARDS
All code changes require confirmation before implementation.  Database schema changes require explicit confirmation.  The `requirements.txt` file (or a separate requirements document if one exists) should be consulted for dependencies.  All environment variables must be validated before use, using a schema like Zod.  Include at a minimum `ANTHROPIC_API_KEY` and optionally `OPENAI_API_KEY`.

## WORKFLOW & RELEASE RULES
Confirmation checkpoints should be added at the end of each major phase or feature implementation. A final review step is already in place.  However, for this project, continuous confirmation during execution is not required.  Stream text updates to the user should be implemented to provide real-time feedback during invoice processing. All files uploaded must be validated for type (PDF, PNG, JPG) and size (<=10MB). Only one file upload at a time is allowed. Implement drag-and-drop functionality for file uploads, allowing only one file at a time (PDF, PNG, JPG) with a maximum size of 10MB.  Provide clear visual feedback to the user during drag-and-drop operations. Validate uploaded files client-side for type and size before uploading, and provide appropriate user feedback in case of errors.  Use `toast.error` to notify the user of any validation issues. Drag-and-drop functionality should work application-wide.  The drag-and-drop area should provide clear visual feedback to the user.  The drag-and-drop area should visually indicate when a file is being dragged over. The drag-and-drop area should not be limited to the chat input area.  The drag-and-drop area should only allow one file upload at a time.  The drag-and-drop area should only accept files of type PDF, PNG, or JPG.  The drag-and-drop area should only accept files of size less than or equal to 10MB. The visual feedback for the drag and drop area should be improved to be more visible and less distracting.  The background of the drag and drop area should be a semi-transparent dark grey with 90% opacity.  The text of the drag and drop area should be white. The backend API `/api/files/upload` must accept files of type PDF, PNG, and JPG with a maximum size of 10MB.  Enhance attachment preview functionality to include a remove button for uploaded files and clickable previews to open the file in a new tab.  The backend API `/api/files/upload` must accept files of type PDF, PNG, and JPG with a maximum size of 10MB. Client-side validation must also be implemented to prevent uploads exceeding 10MB.  Appropriate error messages should be displayed to the user.  The application should only allow a single file upload at a time.  The application should provide clear visual feedback during drag and drop operations.  The visual feedback for the drag-and-drop area should include a semi-transparent dark grey background with 90% opacity and white text.  The drag-and-drop functionality should work application-wide.  The backend API `/api/files/upload` must accept files of type PDF, PNG, and JPG with a maximum size of 10MB. Client-side validation must also be implemented to prevent uploads exceeding 10MB. Appropriate error messages should be displayed to the user. The application should only allow a single file upload at a time. The application should provide clear visual feedback during drag and drop operations. The visual feedback for the drag-and-drop area should include a semi-transparent dark grey background with 90% opacity and white text. The drag-and-drop functionality should work application-wide.

## REFERENCE EXAMPLES
N/A

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
`execution-plan.md` outlines the project phases and timelines. A separate requirements document (`requirements.txt`) should be consulted and the execution plan should ensure it fulfills all requirements.  Version updates to the `execution-plan.md` are to be tracked and noted here. Version 2025-04-13_20-46 incorporates changes based on user feedback and AI review.

## DEBUGGING
Standard debugging practices should be followed. Specific debugging strategies will be addressed as needed.  Stream text updates to the user should be implemented to provide real-time feedback during invoice processing.  Tools for debugging should include grep to search for specific text strings within the codebase.

## FINAL DOs AND DON'Ts
- **DO:** Always confirm code changes before implementation.
- **DO:** Refer to the `execution-plan.md` (and `requirements.txt` if applicable) for guidance.
- **DO:** Add a `status` column (with values: 'uploaded', 'error', 'processed', 'paid'), an `error_message` column, a `file_path` or `storage_key`, and a `confidence_score` column to the `invoices` table in the database.
- **DON'T:** Remove suggestion boxes from the UI without clear context and confirmation of their location. Remove the AI writing suggestion functionality (likely involving components in `lib/editor`, `lib/ai/tools/request-suggestions.ts`, and related UI elements) as it's not relevant for invoice processing.
- **DON'T** proceed with AI model integration in Phase 2 without clarifying which model(s) will be primarily used (GPT-4o, Claude 3.5 Sonnet, or OpenAI GPT-4). Use Claude 3.5 Sonnet as the primary model for invoice processing.
- **DO:**  Ensure all environment variables are validated before use, using a schema like Zod.  Include at a minimum `ANTHROPIC_API_KEY` and optionally `OPENAI_API_KEY`.
- **DO:** Use Claude 3.5 Sonnet as the primary model for invoice processing.  Update the Tech Stack section to reflect this decision.
- **DO:** Add a `status` column (with values: 'uploaded', 'error', 'processed', 'paid'), an `error_message` column, a `file_path`, and a `confidence_score` column to the `invoices` table.
- **DO:** Implement drag-and-drop functionality for file uploads, allowing only one file at a time (PDF, PNG, JPG) with a maximum size of 10MB.  Provide clear visual feedback to the user during drag-and-drop operations. Provide clear visual feedback to the user during drag-and-drop operations.  Use `toast.error` to notify the user of any validation issues.
- **DO:** Implement application-wide drag-and-drop file upload functionality with a semi-transparent dark grey background (90% opacity) and white text.  Clear visual feedback should be provided to the user.  Use `toast.error` for any validation errors.  Only one file (PDF, PNG, JPG, <=10MB) should be allowed at a time.
- **DO:** The backend API `/api/files/upload` must accept files of type PDF, PNG, and JPG with a maximum size of 10MB.  The backend API `/api/files/upload` must accept files of type PDF, PNG, and JPG with a maximum size of 10MB.
- **DO:** The backend API `/api/files/upload` must accept files of type PDF, PNG, and JPG, with a maximum size of 10MB.  Client-side validation must also be implemented to prevent uploads exceeding 10MB.  Appropriate error messages should be displayed to the user.  The application should only allow a single file upload at a time.  The application should provide clear visual feedback during drag and drop operations.  The visual feedback for the drag-and-drop area should include a semi-transparent dark grey background with 90% opacity and white text.  The drag-and-drop functionality should work application-wide.
- **DO:** Enhance attachment preview functionality to include a remove button for uploaded files and clickable previews to open the file in a new tab.
- **DO:** The backend API `/api/files/upload` must accept files of type PDF, PNG, and JPG with a maximum size of 10MB. Client-side validation must also be implemented to prevent uploads exceeding 10MB. Appropriate error messages should be displayed to the user. The application should only allow a single file upload at a time. The application should provide clear visual feedback during drag and drop operations. The visual feedback for the drag-and-drop area should include a semi-transparent dark grey background with 90% opacity and white text. The drag-and-drop functionality should work application-wide.